@page "/article/{*slug}"
@using System.Text
@using Markdig
@using Markdig.Renderers.Html
@using Markdig.Syntax
@using Markdig.Syntax.Inlines
@using HtmlRenderer = Markdig.Renderers.HtmlRenderer

@inject BlogDbContext Context
@inject IOptions<BlogConfig> Config
@inject MarkdownPipeline Pipeline
@inject JSElementReferenceScope Elems
@inject IHttpContextAccessor HttpContextAccessor

<nav class="px-sm-5">
    <ol class="breadcrumb justify-content-center">
        @{
            var cur = "/";
        }
        @for (var i = 0; i < _parts.Length - 1; ++i)
        {
            cur = Path.Join(cur, Uri.EscapeDataString(_parts[i]));
            <li class="breadcrumb-item"><a class="link p-1 rounded" href="@cur">@_parts[i]</a></li>
        }

        <li class="breadcrumb-item active">
            <span class="p-1">
                @(_article?.Name ?? _parts[^1])
            </span>
        </li>
    </ol>
</nav>

<hr class="w-100" />

@if (_article is not null)
{
    <PageTitle>@(_article.Title ?? _article.Name[..^3])</PageTitle>
    <ProgressBar For="Elems"/>

    var mdText = File.ReadAllText(Path.Join(Config.Value.GitLocalPath, _article.Directory, _article.Name));
    var uniqChars = Uri.EscapeDataString(mdText.Distinct().ToArray());

    <HeadContent>
        <link href="@Assets["css/nord.css"]" rel="stylesheet" type="text/css" />
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@200..900&display=swap&text=@uniqChars" rel="stylesheet">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css"
            integrity="sha384-5TcZemv2l/9On385z///+d7MSYlvIEw9FuZTIdZ14vJLqWphw7e7ZPuOiCHJcFCP" crossorigin="anonymous">
    </HeadContent>

    <JS Src="./js/article.js" />

    var ast = Markdown.Parse(mdText, Pipeline);
    var imgBase = Path.Join(_parts[1..^1].Select(Uri.EscapeDataString).ToArray());
    foreach (var img in ast.Descendants<LinkInline>().Where(it => it.IsImage))
    {
        if (img.Url is null || img.Url.StartsWith("http")) return;
        img.Url = Path.Join("/static", imgBase, img.Url);
        var attr = new HtmlAttributes();
        attr.AddProperty("data-ref", Elems[Guid.NewGuid().ToString()]);
        attr.AddClass("img-fluid");
        img.SetAttributes(attr);
    }
    var builder = new StringBuilder();
    var textWriter = new StringWriter(builder);
    var renderer = new HtmlRenderer(textWriter);
    Pipeline.Setup(renderer);
    renderer.Render(ast);

    <div id="article" class="text-start px-sm-4 noto-serif-sc-normal" >
        @((MarkupString)builder.ToString())
    </div>
}
else
{
    <PageTitle>ls /@Path.Join(_parts)</PageTitle>
    <HeadContent>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Symbols+2&display=swap&text=%f0%9f%96%bf" rel="stylesheet">
    </HeadContent>
    <div class="row">
        @foreach (var subDir in _subDirs)
        {
            var title = Path.GetFileName(subDir) + '/';
            var href = Path.Join(subDir.Split('/').Select(Uri.EscapeDataString).ToArray());
            <div class="col-sm-12 col-xl-6 my-2 leading-mark">
                <a class="btn link text-start fw-bold w-100 fs-5 line-truncate-2" href="/article/@href"
                    title="@title"><span class="noto-sans-symbols-2-regular">🖿</span> @title</a>
            </div>
        }
        @foreach (var article in _articles)
        {
            <ArticleLink class="col-sm-12 col-xl-6 my-2 leading-mark" Article="article" />
        }
    </div>
}

@code {
    [Parameter]
    public string? Slug { get; set; }

    string[] _parts = [];

    Models.Article? _article;

    List<Models.Article> _articles = [];
    List<string> _subDirs = [];

    protected override async Task OnInitializedAsync()
    {
        var (dir, name) = (Path.GetDirectoryName(Slug), Path.GetFileName(Slug));
        var normalizedSlug = Path.Join(dir, name);

        _parts = ["article", .. normalizedSlug.Split('/').Where(it => it != string.Empty)];

        if (await Context.Articles.AsNoTracking().Where(a => a.Directory == dir && a.Name == name + ".md").SingleOrDefaultAsync() is { } article)
        {
            _article = article;
            return;
        }

        var fsDir = Path.Join(Config.Value.GitLocalPath, normalizedSlug);
        if (!Directory.Exists(fsDir))
        {
            HttpContextAccessor.HttpContext!.Response.StatusCode = 404;
            return;
        }

        _articles = await Context.Articles.AsNoTracking().Where(a => a.Directory == normalizedSlug).ToListAsync();
        _subDirs = Directory.GetDirectories(fsDir)
            .Select(Path.GetFileName)
            .Select(fileName => Path.Join(normalizedSlug, fileName))
            .Where(it => Context.Articles.Any(a => a.Directory.StartsWith(it)))
            .ToList();
    }
}
