@page "/"
@inject IOptions<BlogConfig> Config
@inject BlogDbContext Context
@inject NavigationManager NavManager

<PageTitle>Zipped Sora</PageTitle>

<div class="row">
    @foreach (var article in _articles)
    {
        <ArticleLink class="col-sm-12 col-xl-6 my-2 leading-mark" Article="article" />
    }
</div>

<hr />

<div class="d-flex justify-content-center pb-2">
    <div>
        @{
            var disabled = Page is <= 1;
            var status = disabled ? "disabled" : string.Empty;
            var href = NavManager.GetUriWithQueryParameter("p", Page - 1);
        }
        <a class="link btn @status" href="@href">&lt;</a>
    </div>
    <div class="align-content-center mx-3">
        @Page / @_pageTotal
    </div>
    <div>
        @{
            disabled = Page >= _pageTotal;
            status = disabled ? "disabled" : string.Empty;
            href = NavManager.GetUriWithQueryParameter("p", Page + 1);
        }
        <a class="link btn @status" href="@href">&gt;</a>
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "p")]
    private int? Page { get; set; }

    private List<Models.Article> _articles = [];
    private int _pageTotal;

    protected override async Task OnInitializedAsync()
    {
        var articlesPerPage = Config.Value.ArticlesPerPage;
        var count = await Context.Articles.AsNoTracking().CountAsync();
        _pageTotal = count / articlesPerPage;
        if (count % articlesPerPage is not 0) _pageTotal++;

        var page = Page.GetValueOrDefault(1);
        if (page is < 1) page = 1;
        if (page > _pageTotal) page = _pageTotal;
        Page = page;

        _articles = await Context.Articles
            .AsNoTracking()
            .OrderByDescending(it => it.CreatedAt)
            .Skip((page - 1) * articlesPerPage)
            .Take(articlesPerPage).ToListAsync();
    }
}
